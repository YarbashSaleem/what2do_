{"version":3,"sources":["components/task.js","components/popup_new.js","components/popup_edit.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","className","strike","newTaskTitle","onClick","onDone","onView","onDelete","PopupNew","placeholder","onChange","e","onEditTitle","target","value","this","toggle","onEditDesc","React","Component","PopupEdit","name","id","desc","Home","state","task","edit","tasks","count","query","pop_new","pop_edit","viewD","push","setState","toggle_popnew","event","i","newtasks","filter","item","newTasks","map","console","log","toggle_popedit","filteredtasks","includes","view","to","bind","type","search","addTask","newTaskDesc","key","editTaskTitle","editTaskDesc","delTask","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8084bd3e.chunk.js","sourcesContent":["import React from 'react';\nconst Task = (props)=> {\n    return(\n    <div className='task'>\n        <div>\n            <p className={props.strike?'strike':null}>{props.newTaskTitle}</p>\n        </div>\n        <div>\n            <button onClick={props.onDone}>Done</button>\n            <button onClick={props.onView}>Edit</button>\n            <button onClick={props.onDelete}>Delete</button>\n        </div>\n    </div>\n    )}\nexport default Task;","import React from 'react';\n\n\nclass PopupNew extends React.Component{\n   \n\n    render(){\n        return(\n            <div className='popup_new'>\n                <div className='popup_header'>\n                    <input placeholder='Title'  onChange={(e)=>{this.props.onEditTitle(e.target.value)}}/>\n                    <button onClick={this.props.toggle}>Add</button>\n                </div>\n                <div className='description'>\n                    <textarea placeholder='Desciption'  onChange={(e)=>{this.props.onEditDesc(e.target.value)}}/>\n                </div>\n            </div>\n        );\n    }\n}\nexport default PopupNew;","import React from 'react';\n\n\nclass PopupEdit extends React.Component{\n   \n\n    render(){\n        return(\n            <div className='popup_edit'>\n                <div className='popup_header'>\n                    <input placeholder='Title' value={this.props.name} onChange={(e)=>{this.props.onEditTitle(e.target.value,this.props.id)}}/>\n                    <button onClick={this.props.toggle}>OK</button>\n                </div>\n                <div className='description'>\n                    <textarea placeholder='Desciption' value={this.props.desc} onChange={(e)=>{this.props.onEditDesc(e.target.value,this.props.id)}}/>\n                </div>\n            </div>\n        );\n    }\n}\nexport default PopupEdit;","import React from 'react';  \nimport Task from '../components/task';\nimport PopupNew from '../components/popup_new'\nimport { Link } from 'react-router-dom';\nimport PopupEdit from '../components/popup_edit';\nclass Home extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            task:'',\n            desc:'',\n            edit:'',\n            tasks:[],\n            count:0,\n            query:'',\n            pop_new:false,\n            pop_edit:false,\n            viewD:0,\n        }\n    }\n    addTask(){\n        const tasks=this.state.tasks\n        const task=this.state.task\n        if(task!==''){\n        tasks.push(\n            {\n                name:this.state.task,\n                desc:this.state.desc,\n                id:this.state.count,\n                strike:false\n            }\n        )\n        this.setState({\n            task:'',\n            desc:'',\n            count:this.state.count+1,\n        })\n        }\n        this.toggle_popnew()\n    }\n    newTaskTitle(event){\n        this.setState({\n            task:event,\n        })\n    }\n    newTaskDesc(event){\n        this.setState({\n            desc:event\n        })\n    }\n    delTask(i){\n        const newtasks=this.state.tasks.filter((item)=>item.id!==i.id);\n        this.setState({\n            tasks:newtasks\n        })\n    }\n    editTaskTitle(e,id){\n        const newTasks=this.state.tasks\n        newTasks.map(i=>{\n            if(id===i.id){\n            i.name=e\n            }\n        })\n        this.setState({tasks:newTasks})\n        console.log(newTasks)\n    }\n    editTaskDesc(e,id){\n        const newTasks=this.state.tasks\n        newTasks.map(i=>{\n            if(id===i.id){\n            i.desc=e\n            }\n        })\n        this.setState({tasks:newTasks})\n        console.log(newTasks)\n    }\n    \n    search(event){\n        this.setState({\n            query:event.target.value\n        })\n        }\n\n    toggle_popnew(){\n        this.setState({\n            pop_new:!this.state.pop_new,\n        })\n    }\n    toggle_popedit(){\n        this.setState({\n            pop_edit:!this.state.pop_edit\n        })\n    }\n    onView(e){\n        this.setState({\n            viewD:e.id\n        })\n        this.toggle_popedit()\n    }\n    onDone(e){\n        const newTasks=this.state.tasks\n        newTasks.map(i=>{\n            if(e.id===i.id){\n            i.strike=!i.strike\n            }\n        })\n        this.setState({tasks:newTasks})\n        console.log(newTasks)\n    }\n\n    render(){\n        let filteredtasks=this.state.tasks.filter((task)=>{\n            return task.name.includes(this.state.query)\n        })\n        let view=this.state.tasks.filter((task)=>{\n            return task.id===this.state.viewD\n        })\n        return(\n            <div className='home_container'>\n                <div className='home'>\n                    <div className='tasks'>\n                        <div className='header'>\n                            <h1>\n                                What2do\n                            </h1>\n                            <Link className='link' to='/'>\n                                Logout\n                            </Link>\n                        </div>\n                        <div className='menu'>\n                            <div className='newTask'>\n                                <p>Add a task</p>\n                                <button id='addTask' onClick={this.toggle_popnew.bind(this)}>+</button>\n                            </div>\n                            <div className='search'>\n                                    <input type='text' placeholder='Search for a task' onChange={this.search.bind(this)}></input>\n                            </div>\n                        </div>\n                    </div>\n                    {this.state.pop_new?<PopupNew toggle={this.addTask.bind(this)} \n                                            onEditTitle={this.newTaskTitle.bind(this)} \n                                            onEditDesc={this.newTaskDesc.bind(this)}/>:null}\n                    {this.state.pop_edit?\n                                            view.map((task,i)=>{\n                                                return(<PopupEdit toggle={this.toggle_popedit.bind(this)} key={i} \n                                                                name={task.name}\n                                                                desc={task.desc}\n                                                                id={task.id}\n                                                                onEditTitle={this.editTaskTitle.bind(this)}\n                                                                onEditDesc={this.editTaskDesc.bind(this)}/>)\n                                            })\n                                            :null}\n                    <div className='tasksList'>\n                                <ul>\n                                    {   \n                                        filteredtasks.map((task,i)=>{\n                                            return(<Task newTaskTitle={task.name} key={i} \n                                                        newTaskDesc={task.desc}\n                                                        onDelete={this.delTask.bind(this,task)}\n                                                        id={task.id}\n                                                        onView={this.onView.bind(this,task)}\n                                                        onDone={this.onDone.bind(this,task)}\n                                                        strike={task.strike}/>)\n                                                })\n                                    }\n                                </ul>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default Home;","import React from 'react';\nimport './App.css';\nimport { Route, BrowserRouter as Router } from 'react-router-dom'  \nimport Home from './pages/home';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path='/' component={Home}/>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}